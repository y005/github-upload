메모리 

저장하기 위해 쓴다

전류는 한번 흘러서 사라진다
=>되먹임 방법 이용

1.Set-Reset Latch
-전류를 계속 회전시킨다
-머물러 있는 전압의 값을 관찰가능
-입력값에 대한 출력값을 
  다시 입력값으로 입력한다
-원하는 값을 저장가능하게 함

s=1이면 연결된 소자는 다른 입력값에 상관없이 무조건 0이 나온다 -q
r=0이면 00으로 무조건 1이 나온다 q

s=0,r=1인 경우 반대로

s=0,r=0인 경우 최근 입력값에 대한 반대값이 계속 들어온다.

=>
s의 값(s를 not시켜 r을 대신한다)을 저장한 q

+둘다 1이면 두개의 값이 0으로 충돌하기 때문에 사용하지 않는다

단점: s,r이 0,0인 상황을 만들 수 없다,
       준비시간이 거의 없다

2.D Latch

control 라인인 c를 추가하여 
c를 clock에 연결시켜 0,1의 값을 보내주면 

c=0이면 모든 S-R Latch의 출력값이 00이 되어 이전 상태값이 계속 머무른다
c=0일 때는 이전 상태로 머무른다(새로운 데이터의 값으로 바꿀 수 있다)

c=1이면 d의 값을 그대로 반영하여 q의 값이 d의 값으로 변경된다
c=1일 때는 안정적인 상태로 저장해야 하는 값(d)을 따라한다(저장)

장점: 중간에 변화하는 과정을 따라하지 않는다
단점: 절반의 시간이 준비시간 

3.D flip-flop

D latch 두개를 연달아 붙여놓는다  
C=1이면 앞 D Latch에는 1이 들어와 앞에는 값을 저장하고
             뒤 D Latch에는 0이 들어와 뒤에는 값을 유지하고 있다

C=0이면 앞 D Latch에는 0이 들어와 앞에는 값을 유지하고
             뒤 D Latch에는 1이 들어와 뒤에는 값을 저장하고 있다

Clock이 0으로 떨어지기 직전에 앞값을 저장하고 

falling edge (클럭이 1->0이 되는) 직전의 값만을 유의미하게 전달된다(저장한다)
데이터를 안정적으로 유지하기 위한 시간대가 훨씬 짧아진다

장점:전체를 준비시간으로 쓸 수 있다
       falling edge 직전의 값만을 저장
       나머지 시간은 값을 계속 유지해준다




